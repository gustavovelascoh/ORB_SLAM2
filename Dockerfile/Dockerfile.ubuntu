FROM ubuntu:18.04
LABEL maintainer="gustavovelascoh@gmail.com"

# old one is 2.4.11
ENV OPENCV 4.2.0

# Enable the Ubuntu multiverse repository.
#RUN echo "deb http://us.archive.ubuntu.com/ubuntu/ trusty multiverse" >> /etc/apt/source.list
#RUN echo "deb-src http://us.archive.ubuntu.com/ubuntu/ trusty multiverse">> /etc/apt/source.list
#RUN echo "deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates multiverse" >> /etc/apt/source.list
#RUN echo "deb-src http://us.archive.ubuntu.com/ubuntu/ trusty-updates multiverse" >> /etc/apt/source.list
# Initial update and install of dependency that can add apt-repos
RUN apt-get -y update && apt-get install -y software-properties-common python3-software-properties

# Add global apt repos
RUN add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu xenial universe" && \
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse" && \
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse" && \
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu xenial-backports main restricted universe multiverse" && \
	add-apt-repository -y "deb http://security.ubuntu.com/ubuntu xenial-security main"

# This avoid blocking due to tzdata requiring interactive configuration
ARG DEBIAN_FRONTEND=noninteractive
# Get dependencies
RUN apt-get update && apt-get install -y \
	libgtk2.0-dev \
	libjpeg-dev \
	libjasper-dev \
	libopenexr-dev cmake python3-dev \
	python3-numpy python3-tk libtbb-dev \
	libeigen3-dev yasm libfaac-dev \
	libopencore-amrnb-dev libopencore-amrwb-dev \
	libtheora-dev libvorbis-dev libxvidcore-dev \
	libx264-dev libqt4-dev libqt4-opengl-dev \
	sphinx-common libv4l-dev libdc1394-22-dev \
	libavcodec-dev libavformat-dev libswscale-dev \
	libglew-dev libboost-dev libboost-python-dev libboost-serialization-dev \
	htop nano wget git unzip \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Clone and install eigen 3.2.10 and Pangolin
RUN cd /opt && wget https://gitlab.com/libeigen/eigen/-/archive/3.2.10/eigen-3.2.10.tar.gz -O eigen3.tgz \
&& tar zxvf eigen3.tgz && cd  eigen-3.2.10 \
&& mkdir build && cd build \
&& cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RELEASE .. \
&& make install \
&& cd /opt && git clone https://github.com/stevenlovegrove/Pangolin.git \
&& cd Pangolin && mkdir build && cd build && cmake  .. \
&& make -j4 && make install

# Clone and install OpenCV (version defined by $OPENCV)
RUN cd /opt && wget https://codeload.github.com/opencv/opencv/zip/$OPENCV -O opencv.zip \
&& unzip opencv.zip \
&& cd opencv-$OPENCV && mkdir build && cd build \
&& cmake -D CMAKE_BUILD_TYPE=RELEASE -D WITH_CUDA=OFF -D WITH_OPENGL=OFF -D ENABLE_PRECOMPILED_HEADERS=OFF .. \
&& make -j4 && make install \
&& rm -rf /opt/* && ldconfig
